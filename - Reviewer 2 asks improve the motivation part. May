- Reviewer 2 asks improve the motivation part. Maybe we could use some numbers from the paper "Data Integration: After the Teenage Years" for this purpose (see Section 3).
Giovanin: Ok. Can you do that?


- Also, Reviewers 1 and 2 complain about the baseline we selected, wondering why we don't use Incremental ER or Naumann's work instead of schema-based PSN. I remember in earlier version of the paper we made a distinction between static and dynamic progressive methods, but there is no relevant mention in the text anymore. I think this distinction could help us to address both claims about the suitability of the baseline methods.
Giovanni: We now have as sub-section in the Related Work "Crowdsourced (or Oracle) Methods", which describe what we before (in SIGMOD_v) we were calling "dynamic" methods (e.g., [14] Divesh's "Online ER using an Oracle").
In my opinion (I am open to change idea), this classification is usefull to explain why we do not exploit "transitivity". We basically are saying "look, transitivity holds only in the Oracle model".

The only technique that this discussion do not cover is the "look-ahead strategy" with Progressive Sorted Neighbor of Naumann's paper.
The Look-Ahead strategy uses this observation to adjust the ranking of comparison candidates at runtime: If record pair (i, j) has been identified as a duplicate, then the pairs (i+1, j) and (i, j+1) have a high chance of being duplicates of the same cluster.
OBSERVATIONS 1: this heuristic works only for Dirty ER: in Clean-Clean ER, if (i, j) are duplicates, the pairs (i+1, j) and (i, j+1) cannot be duplicates
OBSERVATIONS 2: this heuristic has not much sense in schema-agnostic setting though, since the duplicates are "sparse" inthe sorted list...
OBSERVATIONS 3: we could implement it for PSN, it is true, and we never did because we were sayng that we do not consider dynamic methods

Conclusion: I would not mention the words "dynamic" vs "static", since the only "dinamic method" we are not covering is the "look-ahead strategy" for Dirty ER.
Yet, we are not completely covering the case of Clean-Clean ER. I have not in mind a solution (I don't think to have time to do new test in the near future).
If I have to propose a quasi-solution I would explain that Naumann's PSN improves PSN in two ways: it consider transitivity and it introduces and heuristic to improve progressiveness on Dirty ER. Then I would say that (i) we do not assume that the transitivity property holds (as emxlained for the oracle methods), and (ii) we do not consider heuristics which assumes the feedback of the "match function", since their performance strictly depends on the perfromance of the "match function".